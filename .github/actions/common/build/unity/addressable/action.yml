name: Build Unity Addressable
description: Unity Addressable을 빌드하는 작업

inputs:
  unity_license:
    required: true
    description: Unity License 내용
  unity_email:
    required: true
    description: Unity 계정
  unity_password:
    required: true
    description: Unity 계정의 패스워드
  unity_version:
    required: true
    description: 빌드할 프로젝트의 Unity 버전
  project_path:
    required: true
    description: 빌드할 working directory
  execute_method:
    required: true
    description: 실행할 빌드 method
  profile_path:
    required: true
    description: 빌드 프로필 경로(상대 경로 필요)
  bundle_version:
    required: true
    description: 번들 버전
  publish_dir:
    required: false
    default: publish
    description: output 경로

runs:
  using: "composite"
  steps:
    - name: Inject License
      id: inject-license
      env:
        UNITY_LICENSE: ${{ inputs.unity_license }}
      run: |
        $dir = 'C:\ProgramData\Unity'
        $unity_license_file_path = Join-Path $dir 'Unity_lic.ulf'

        # UTF-8 (No BOM)로 정확히 쓰기, 추가 개행 없음
        $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
        [System.IO.File]::WriteAllText("$unity_license_file_path", $env:UNITY_LICENSE, $utf8NoBom)

        "UNITY_LICENSE_FILE_PATH=$unity_license_file_path" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      shell: powershell

    - name: Build Unity Server Project
      run: |
        $unity = "C:\Program Files\Unity\Hub\Editor\${{ inputs.unity_version }}\Editor\Unity.exe"

        $args = @(
          "-quit", "-batchmode", "-nographics",
          "-quitTimeout", "1800",
          "-username", "${{ inputs.unity_email }}", "-password", "${{ inputs.unity_password }}",
          "-manualLicenseFile", "${{ steps.inject-license.outputs.UNITY_LICENSE_FILE_PATH }}",
          "-executeMethod", "${{ inputs.execute_method }}",
          "-buildOutput", "${{ inputs.publish_dir }}",
          "-profilePath", "${{ inputs.profile_path }}",
          "-bundleVersion", "${{ inputs.bundle_version }}",
          "-projectPath", "${{ inputs.project_path }}"
        )

        $proc = Start-Process -FilePath $unity -ArgumentList $args -PassThru -Wait -NoNewWindow
        if ($proc.ExitCode -ne 0) {
          throw "Unity build failed with exit code $($proc.ExitCode)"
        }

      shell: powershell
