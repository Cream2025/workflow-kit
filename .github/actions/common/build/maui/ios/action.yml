# .github/actions/build-maui-ios/action.yml
name: Build MAUI iOS Platform
description: MAUI iOS Platform 빌드 및 서명

inputs:
  # --- 기존 입력 ---
  work_dir:
    required: true
    description: 빌드할 working directory

  project_name:
    required: true
    description: 빌드할 프로젝트명

  target_framework:
    required: true
    description: 타겟 프레임워크

  runtime_identifier:
    required: false
    default: ios-arm64
    description: Runtime Identifier

  artifact_name:
    required: true
    description: 압축 파일명 (.ipa/.zip)

  codesign_key:
    required: true
    description: CodesignKey (예 Apple Distribution …)

  codesign_provision:
    required: true
    description: CodesignProvision (예 Peace Production)

  version:
    required: true
    description: ApplicationVersion (예 1.1.0)

  application_display_version:
    required: true
    description: ApplicationDisplayVersion (예 305)

  publish_dir:
    required: false
    default: publish
    description: output 경로

  build_configuration:
    required: false
    default: Release
    description: Build Configuration

  ios_provisioning_base64:
    required: true
    description: Base64‑encoded .mobileprovision

runs:
  using: "composite"
  steps:
    # (1) 프로비저닝 프로파일 설치
    - name: Install provisioning profile
      run: |
        PP_PATH="$RUNNER_TEMP/profile.mobileprovision"
        echo "${{ inputs.ios_provisioning_base64 }}" | base64 -d > "$PP_PATH"
        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
        cp "$PP_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/"
      shell: bash

    # (2) 워크로드 설치
    - name: Dotnet Workload Restore
      run: |
        dotnet workload restore
      shell: bash

    # (3) 빌드 + 아카이브 (.xcarchive → .app)
    - name: Build MAUI iOS project
      run: |
        dotnet publish ${{ inputs.work_dir }}/${{ inputs.project_name }}/${{ inputs.project_name }}.csproj \
          -c ${{ inputs.build_configuration }} \
          -f ${{ inputs.target_framework }} \
          -o ${{ inputs.publish_dir }} \
          -p:RuntimeIdentifier=${{ inputs.runtime_identifier }} \
          -p:ArchiveOnBuild=true \
          -p:CodesignKey="${{ inputs.codesign_key }}" \
          -p:CodesignProvision="${{ inputs.codesign_provision }}" \
          -p:ApplicationVersion=${{ inputs.version }} \
          -p:GenerateBundleVersion=true \
          -p:ApplicationDisplayVersion=${{ inputs.application_display_version }}
      shell: bash

    # (3) IPA 패키징 (Payload/*.app → .ipa)
    - name: Create .ipa
      run: |
        APP_NAME=$(ls ${{ inputs.publish_dir }} | grep '\.app$' | head -n1)
        mkdir Payload
        cp -R "${{ inputs.publish_dir }}/$APP_NAME" Payload/
        /usr/bin/zip -qr "${{ inputs.publish_dir }}/${{ inputs.artifact_name }}.ipa" Payload
      shell: bash

    # (4) 아카이브(.ipa) 업로드 준비 (Caller workflow가 artifacts/upload 하도록)
    - name: List output files
      run: ls -R ${{ inputs.publish_dir }}
      shell: bash
