# .github/actions/build-maui-ios/action.yml
name: Build MAUI iOS Platform
description: MAUI iOS Platform 빌드 및 서명

inputs:
  # --- 기존 입력 ---
  work_dir:
    required: true
    description: 빌드할 working directory

  project_name:
    required: true
    description: 빌드할 프로젝트명

  target_framework:
    required: true
    description: 타겟 프레임워크

  runtime_identifier:
    required: false
    default: ios-arm64
    description: Runtime Identifier

  artifact_name:
    required: true
    description: 압축 파일명 (.ipa/.zip)

  codesign_key:
    required: true
    description: CodesignKey (예 Apple Distribution …)

  version:
    required: true
    description: ApplicationVersion (예 1.1.0)

  application_display_version:
    required: true
    description: ApplicationDisplayVersion (예 305)

  ios_provisioning_base64:
    required: true
    description: Base64‑encoded .mobileprovision
    
  ios_cert_base64:
    required: true
    description: Base64‑encoded p12 인증서
    
  ios_cert_password:
    required: true
    description: p12 인증서 패스워드
    
  publish_dir:
    required: false
    default: publish
    description: output 경로

  build_configuration:
    required: false
    default: Release
    description: Build Configuration


runs:
  using: "composite"
  steps:
  
    # (0) X Code 버전 셋업
    - name: Select latest Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16'  # (혹은 현재 최신 버전으로)

    # (1) 인증서 셋업
    - name: Install Apple Certificate
      env:
        P12_DISTRIBUTION_CERTIFICATE_BASE64: ${{ inputs.ios_cert_base64 }}
        P12_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ inputs.ios_cert_password }}
      run: |
        # 인증서 파일 생성
        CERTIFICATE_PATH=$RUNNER_TEMP/distribution_certificate.p12
        echo "$P12_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
        
        # 새로운 키체인 생성 (GitHub Actions 환경에서 더 안정적)
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        KEYCHAIN_PASSWORD=actions
        
        # 키체인 생성 및 설정
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # 인증서 임포트
        security import $CERTIFICATE_PATH -P "$P12_DISTRIBUTION_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH ~/Library/Keychains/login.keychain-db
        security default-keychain -s $KEYCHAIN_PATH
        
        # 키체인 권한 설정
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # 인증서 확인
        echo "=== Installed certificates ==="
        security find-identity -v -p codesigning
      shell: bash

    - name: Install provisioning profile
      id: install-provisioning-profile
      run: |
        PP_PATH="$RUNNER_TEMP/profile.mobileprovision"
        echo "${{ inputs.ios_provisioning_base64 }}" | base64 -d > "$PP_PATH"
        
        # 프로비저닝 프로파일 UUID 추출
        PP_UUID=$(security cms -D -i "$PP_PATH" | plutil -extract UUID xml1 -o - - | xmllint --xpath "string(//string)" -)
        
        # 프로비저닝 프로파일 설치
        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
        cp "$PP_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$PP_UUID.mobileprovision"
        
        echo "Provisioning profile installed with UUID: $PP_UUID"
        echo "uuid=$PP_UUID" >> $GITHUB_OUTPUT
      shell: bash


    # (2) 워크로드 설치
    - name: Dotnet Workload Restore
      run: |
        dotnet workload restore ${{ inputs.work_dir }}/${{ inputs.project_name }}/${{ inputs.project_name }}.csproj
      shell: bash

    - name: Clean bin/obj
      run: |
        rm -rf ${{ inputs.work_dir }}/${{ inputs.project_name }}/bin
        rm -rf ${{ inputs.work_dir }}/${{ inputs.project_name }}/obj
      shell: bash


    # (3) 빌드 + 아카이브 (.xcarchive → .app)
    - name: Build MAUI iOS project
      run: |
        dotnet publish ${{ inputs.work_dir }}/${{ inputs.project_name }}/${{ inputs.project_name }}.csproj \
          -c ${{ inputs.build_configuration }} \
          -f ${{ inputs.target_framework }} \
          -o ${{ inputs.publish_dir }} \
          -p:RuntimeIdentifier=${{ inputs.runtime_identifier }} \
          -p:ArchiveOnBuild=true \
          -p:CodesignKey="${{ inputs.codesign_key }}" \
          -p:CodesignProvision="${{ steps.install-provisioning-profile.outputs.uuid }}" \
          -p:ApplicationVersion=${{ inputs.version }} \
          -p:GenerateBundleVersion=true \
          -p:ApplicationDisplayVersion=${{ inputs.application_display_version }}
      shell: bash

    # (3) IPA RENAME
    - name: Rename IPA artifact
      run: |
        mv ${{ inputs.publish_dir }}/${{ inputs.project_name }}.ipa ${{ inputs.publish_dir }}/${{ inputs.artifact_name }}.ipa
      shell: bash

