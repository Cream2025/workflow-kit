name: Build Maui AOS Platform
description: MAUI AOS Platform ÎπåÎìúÌïòÎäî ÏûëÏóÖ

inputs:
  work_dir:
    required: true
    description: ÎπåÎìúÌï† working directory
  project_name:
    required: true
    description: ÎπåÎìúÌï† ÌîÑÎ°úÏ†ùÌä∏Î™Ö
  target_framework:
    required: true
    description: ÌÉÄÍ≤ü ÌîÑÎ†àÏûÑÏõåÌÅ¨
  artifact_name:
    required: true
    description: apkÎ™Ö
  android_keystore_base64:
    required: true
    description: android keystore base64
  android_key_alias:
    required: true
    description: android keystore alias
  android_key_password:
    required: true
    description: android keystore alias password
  android_keystore_password:
    required: true
    description: android keystore password
  publish_dir:
    required: false
    default: publish
    description: output Í≤ΩÎ°ú
  build_configuration:
    required: false
    default: Release
    description: Build Configuration

runs:
  using: "composite"
  steps:
  
    # 0) Install MAUI workload
    - name: Install .NET MAUI Android workload
      shell: bash
      run: |
        dotnet workload install maui-android

    - name: Decode keystore
      run: |
        echo "${{ inputs.android_keystore_base64 }}" | base64 -d > keystore.keystore
        
    # 1) Publish ‚Äì APK only
    - name: Publish MAUI APK
      shell: bash
      run: |
        dotnet publish "${{ inputs.work_dir }}/${{ inputs.project_name }}/${{ inputs.project_name }}.csproj" \
          -c "${{ inputs.build_configuration }}" \
          -f "${{ inputs.target_framework }}" \
          -p:AndroidPackageFormats=apk \
          -p:RuntimeIdentifier=android-arm64 \
          -p:CI_VARIABLE=true \
          -p:AndroidKeyStore=true \
          -p:AndroidSigningKeyStore="keystore.keystore" \
          -p:AndroidSigningKeyAlias="${{ inputs.android_key_alias }}" \
          -p:AndroidSigningKeyPass="${{ inputs.android_key_password }}" \
          -p:AndroidSigningStorePass="${{ inputs.android_keystore_password }}" \
          -o "${{ inputs.publish_dir }}"

    # 2) Rename to artifact_name
    - name: Rename APK to artifact name
      shell: bash
      run: |
        apk_path=$(find "${{ inputs.publish_dir }}" -maxdepth 1 -type f -name '*.apk' | head -n 1)
        if [ -z "$apk_path" ]; then
          echo "‚ùå APK not found in ${publish_dir}" && exit 1
        fi
        mv "$apk_path" "${{ inputs.publish_dir }}/${{ inputs.artifact_name }}"
        echo "üì¶ APK ready: ${publish_dir}/${{ inputs.artifact_name }}"


