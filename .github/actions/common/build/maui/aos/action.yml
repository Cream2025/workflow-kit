name: Build Maui AOS Platform
description: MAUI AOS Platform 빌드하는 작업

inputs:
  work_dir:
    required: true
    description: 빌드할 working directory
  project_name:
    required: true
    description: 빌드할 프로젝트명
  target_framework:
    required: true
    description: 타겟 프레임워크
  artifact_name:
    required: true
    description: apk명
  publish_dir:
    required: false
    default: publish
    description: output 경로
  build_configuration:
    required: false
    default: Release
    description: Build Configuration

runs:
  using: "composite"
  steps:
  
    # 0) Install MAUI workload
    - name: Install .NET MAUI Android workload
      shell: bash
      run: |
        dotnet workload install maui-android
        
    # 1) Publish – APK only
    - name: Publish MAUI APK
      shell: bash
      run: |
        dotnet publish "${{ inputs.work_dir }}/${{ inputs.project_name }}/${{ inputs.project_name }}.csproj" \
          -c "${{ inputs.build_configuration }}" \
          -f "${{ inputs.target_framework }}" \
          -p:AndroidPackageFormats=apk \
          -p:RuntimeIdentifier=android-arm64
          -o "${{ inputs.publish_dir }}"

    # 2) Rename to artifact_name
    - name: Rename APK to artifact name
      shell: bash
      run: |
        apk_path=$(find "${{ inputs.publish_dir }}" -maxdepth 1 -type f -name '*.apk' | head -n 1)
        if [ -z "$apk_path" ]; then
          echo "❌ APK not found in ${publish_dir}" && exit 1
        fi
        mv "$apk_path" "${{ inputs.publish_dir }}/${{ inputs.artifact_name }}"
        echo "📦 APK ready: ${publish_dir}/${{ inputs.artifact_name }}"


